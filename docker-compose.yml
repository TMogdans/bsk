services:
  # Neuer Node.js Event-Service

  event-service:
    build:
      context: .
      dockerfile: services/event-service/deployment/development/Dockerfile
    container_name: event-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
    environment:
      NODE_ENV: development
      PORT: 3000
      LOG_LEVEL: debug
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: events
      DB_USER: postgres
      DB_PASSWORD: S3cret
      NATS_SERVER: nats:4222
    ports:
      - "3010:3000"
    volumes:
      - ./services/event-service/api:/app/services/event-service/api
      - node_modules_event:/app/services/event-service/api/node_modules
    networks:
      - bsk-network
    # command wird automatisch an das ENTRYPOINT-Skript Ã¼bergeben
    command: ["pnpm", "run", "dev"]

  # Rating Write Service
  rating-write-service:
    build:
      context: .
      dockerfile: services/rating-write-service/deployment/development/Dockerfile
    container_name: rating-write-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
    environment:
      NODE_ENV: development
      PORT: 3000
      LOG_LEVEL: debug
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: rating_write
      DB_USER: postgres
      DB_PASSWORD: S3cret
      NATS_SERVER: nats:4222
    ports:
      - "3011:3000"
    volumes:
      - ./services/rating-write-service/api:/app/services/rating-write-service/api
    networks:
      - bsk-network
    command: ["pnpm", "run", "dev"]

  # Rating Read Service
  rating-read-service:
    build:
      context: .
      dockerfile: services/rating-read-service/deployment/development/Dockerfile
    container_name: rating-read-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
    environment:
      NODE_ENV: development
      PORT: 3000
      LOG_LEVEL: debug
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: rating_read
      DB_USER: postgres
      DB_PASSWORD: S3cret
      NATS_SERVER: nats:4222
    ports:
      - "3012:3000"
    volumes:
      - ./services/rating-read-service/api:/app/services/rating-read-service/api
    networks:
      - bsk-network
    command: ["pnpm", "run", "dev"]

  # Rating View Service (Frontend) - simplified approach
  rating-view-service:
    build:
      context: .
      dockerfile: services/rating-view-service/Dockerfile
    container_name: rating-view-service
    restart: unless-stopped
    environment:
      NODE_ENV: development
    ports:
      - "3013:3000"
    volumes:
      - ./services/rating-view-service/src:/app/src
    networks:
      - bsk-network
    depends_on:
      - nats
      - rating-read-service
      - rating-write-service

  # Library Service
  library-service:
    build:
      context: .
      dockerfile: services/library-service/deployment/development/Dockerfile
    container_name: library-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
    environment:
      NODE_ENV: development
      PORT: 3000
      LOG_LEVEL: debug
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: library
      DB_USER: postgres
      DB_PASSWORD: S3cret
      NATS_SERVER: nats:4222
    ports:
      - "3014:3000"
    volumes:
      - ./services/library-service/api:/app/services/library-service/api
    networks:
      - bsk-network
    command: ["pnpm", "run", "dev"]

  bsk_frontend:
    build:
      context: design
      dockerfile: Dockerfile
    container_name: bsk_frontend
    restart: unless-stopped
    environment:
      SERVICE_NAME: bsk_frontend
      SERVICE_TAGS: dev
    ports:
      - "3001:3000"
      - "6006:6006"
    volumes:
      - ./design:/design
    networks:
      - bsk-network

  krakend_ce:
    image: devopsfaith/krakend
    volumes:
      - ./krakend:/etc/krakend
    ports:
      - "1234:1234"
      - "8080:8080"
      - "8090:8090"
    command: [ "run", "-d", "-c", "/etc/krakend/config.json" ]
    networks:
      - bsk-network
    depends_on:
      - event-service
      - rating-read-service
      - rating-write-service
      - library-service

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/config:/etc/prometheus
      - ./prometheus/data:/prometheus
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/config:/etc/grafana
    ports:
      - "3333:3000"
    depends_on:
      - prometheus

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      DB_VENDOR: ${KEYCLOAK_VENDOR}
      DB_ADDR: ${KEYCLOAK_HOST}
      DB_DATABASE: ${KEYCLOAK_DATABASE}
      DB_USER: ${KEYCLOAK_DB_USER}
      DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev
    ports:
      - 8088:8080
    depends_on:
      - postgres

  nats:
    image: nats
    command: "-c /etc/nats/nats.conf --cluster nats://0.0.0.0:6222 --routes=nats://ruser:T0pS3cr3t@nats:6222"
    volumes:
      - ./nats/config/:/etc/nats
    ports:
      - "4222:4222"
      - "6222:6222"
      - "8222:8222"
    networks:
      - bsk-network

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    volumes:
      - dbdata2:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=S3cret
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    command: >
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
    networks:
      - bsk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5


networks:
  bsk-network:
    driver: bridge

volumes:
  dbdata:
  dbdata2:
  node_modules_event: