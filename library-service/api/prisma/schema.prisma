generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "native"]
  output        = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Award {
  id               String             @id @default(uuid())
  name             String             @unique
  slug             String             @unique
  description      String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  AwardOnBoardGame AwardOnBoardGame[]

  @@index([slug, name])
}

model BoardGame {
  id                 String                 @id @default(uuid())
  name               String                 @unique
  slug               String                 @unique
  description        String
  minAge             Int
  minPlayTimeMinutes Int
  maxPlayTimeMinutes Int
  minNumberOfPlayers Int
  maxNumberOfPlayers Int
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  links              Link[]
  awards             AwardOnBoardGame[]
  categories         CategoryOnBoardGame[]
  mechanics          MechanicOnBoardGame[]
  publishers         PublisherOnBoardGame[]
  artists            ArtistOnBoardGame[]
  authors            AuthorOnBoardGame[]
  Person             Person?                @relation(fields: [personId], references: [id])
  personId           String?
  Publisher          Publisher?             @relation(fields: [publisherId], references: [id])
  publisherId        String?

  @@index([slug, name])
}

model Category {
  id                  String                @id @default(uuid())
  name                String                @unique
  slug                String                @unique
  description         String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  CategoryOnBoardGame CategoryOnBoardGame[]

  @@index([slug, name])
}

model Link {
  id          String     @id @default(uuid())
  title       String
  url         String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  BoardGame   BoardGame? @relation(fields: [boardGameId], references: [id])
  boardGameId String?
  Publisher   Publisher? @relation(fields: [publisherId], references: [id])
  publisherId String?
  Person      Person?    @relation(fields: [personId], references: [id])
  personId    String?
}

model Mechanic {
  id                  String                @id @default(uuid())
  name                String                @unique
  slug                String                @unique
  description         String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  MechanicOnBoardGame MechanicOnBoardGame[]

  @@index([slug, name])
}

model Person {
  id                String              @id @default(uuid())
  firstName         String
  lastName          String
  slug              String              @unique
  description       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  boardGames        BoardGame[]
  links             Link[]
  ArtistOnBoardGame ArtistOnBoardGame[]
  AuthorOnBoardGame AuthorOnBoardGame[]

  @@unique([firstName, lastName])
  @@index([slug, firstName, lastName])
}

model Publisher {
  id                   String                 @id @default(uuid())
  name                 String                 @unique
  slug                 String                 @unique
  description          String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  boardGames           BoardGame[]
  links                Link[]
  PublisherOnBoardGame PublisherOnBoardGame[]

  @@index([slug, name])
}

model AwardOnBoardGame {
  boardGame   BoardGame @relation(fields: [boardGameId], references: [id])
  boardGameId String
  award       Award     @relation(fields: [awardId], references: [id])
  awardId     String

  @@id([boardGameId, awardId])
}

model CategoryOnBoardGame {
  boardGame   BoardGame @relation(fields: [boardGameId], references: [id])
  boardGameId String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String

  @@id([boardGameId, categoryId])
}

model MechanicOnBoardGame {
  boardGame   BoardGame @relation(fields: [boardGameId], references: [id])
  boardGameId String
  mechanic    Mechanic  @relation(fields: [mechanicId], references: [id])
  mechanicId  String

  @@id([boardGameId, mechanicId])
}

model PublisherOnBoardGame {
  boardGame   BoardGame @relation(fields: [boardGameId], references: [id])
  boardGameId String
  publisher   Publisher @relation(fields: [publisherId], references: [id])
  publisherId String

  @@id([boardGameId, publisherId])
}

model ArtistOnBoardGame {
  boardGame   BoardGame @relation(fields: [boardGameId], references: [id])
  boardGameId String
  artist      Person    @relation(fields: [artistId], references: [id])
  artistId    String

  @@id([boardGameId, artistId])
}

model AuthorOnBoardGame {
  boardGame   BoardGame @relation(fields: [boardGameId], references: [id])
  boardGameId String
  author      Person    @relation(fields: [authorId], references: [id])
  authorId    String

  @@id([boardGameId, authorId])
}
