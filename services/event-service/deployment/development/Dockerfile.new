FROM node:20-alpine

# Installiere PostgreSQL-Client für pg_isready
RUN apk add --no-cache postgresql-client

WORKDIR /app

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Copy package.json files for workspace
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Copy the service package.json and migration files
COPY services/event-service/api/package.json ./services/event-service/api/
COPY services/event-service/api/src/migrations/ ./services/event-service/api/src/migrations/

# Erstellen eines vereinfachten Startup-Skripts
RUN echo '#!/bin/sh\nset -e\n\necho "Starting event-service initializations..."\n\n# Warten auf die Datenbank\necho "Waiting for Postgres to be ready..."\n# Simple check with retry\nfor i in $(seq 1 30); do\n  pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER && break\n  echo "Waiting for postgres (attempt $i/30)..."\n  sleep 1\ndone\n\n# Fehler, wenn die Datenbank nach 30 Versuchen nicht erreichbar ist\npg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER || exit 1\n\necho "Postgres is ready, running migrations..."\n\n# Führe Migrationen aus\ncd /app/services/event-service/api\n# Stelle sicher, dass pg installiert ist\npnpm install pg --save-prod\n# Führe das einfache Migration-Skript aus\nnode src/migrations/db-init.js\n\necho "Migrations completed, starting application..."\n\n# Starte die Anwendung\nexec "$@"' > /startup.sh && chmod +x /startup.sh

# Set working directory to service
WORKDIR /app/services/event-service/api

# Expose port
EXPOSE 3000

# Startup script wird beim Container-Start ausgeführt
ENTRYPOINT ["/startup.sh"]

# Default-Befehl, wird an den ENTRYPOINT übergeben
CMD ["pnpm", "run", "dev"]